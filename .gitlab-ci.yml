# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:

 - build-push
 - deploy-prd
 
image: docker:19.03.12
variables:
 DOCKER_HOST: tcp://docker:2375/
 DOCKER_TLS_CERTDIR: ""
 GCP_PROJECT_NAME: tcm-prd
 REGISTRY_HOSTNAME: gcr.io/${GCP_PROJECT_NAME}
 DOCKER_IMAGE_NAME: api-prd-wp
services:
 - docker:19.03.12-dind

build-push:
 stage: build-push
 before_script:
   - docker info
   - echo "$SERVICE_ACCOUNT_KEY" > key.json
   - docker login -u _json_key --password-stdin https://gcr.io < key.json
 script:
   - docker build --tag $REGISTRY_HOSTNAME/$DOCKER_IMAGE_NAME:$CI_COMMIT_SHORT_SHA .
   - docker push $REGISTRY_HOSTNAME/$DOCKER_IMAGE_NAME:$CI_COMMIT_SHORT_SHA
 rules:
   - when: manual



deploy-prd:
 stage: deploy-prd
 image: aquamars00/gcloud-with-kubectl
 variables:
  GCP_PROJECT_NAME: tcm-prd
  GKE_CLUSTER_NAME: gke-tcmba-production
  APP: api
  NAMESPACE: api
  APP_URL: $APP.tcm.ba.gov.br
  APP_PORT: 8080

  
 before_script:
   - apk --update add gettext

 script:
# Authenticate with GKE
   - echo "$SERVICE_ACCOUNT_KEY" > key.json
   - gcloud auth activate-service-account --key-file=key.json


# unit-test-job:   # This job runs in the test stage.
#   stage: test    # It only starts when the job in the build stage completes successfully.
#   script:
#     - echo "Running unit tests... This will take about 60 seconds."
#     - sleep 60
#     - echo "Code coverage is 90%"

# lint-test-job:   # This job also runs in the test stage.
#   stage: test    # It can run at the same time as unit-test-job (in parallel).
#   script:
#     - echo "Linting code... This will take about 10 seconds."
#     - sleep 10
#     - echo "No lint issues found."

# deploy-job:      # This job runs in the deploy stage.
#   stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."
